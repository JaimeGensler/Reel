### Enums ###
enum TutorTypes {
    WRITING
    CONTENT
}
enum RequestStatus {
    PENDING
    ASSIGNED
    COMPLETED
    # Archived?
}
###############

### Collections ###
type Session @collection(name: "Sessions") {
    id: ID!
    createdAt: Time!

    user: Student!
}
type Student @collection(name: "Students") {
    id: ID!
    username: String!
    passwordHash: String!

    name: String!
    classStanding: Int!
    majors: [String!]!
    minors: [String!]!
    tutorTypes: [TutorTypes!]!
    courses: [Course!]!

    requests: [Request!]! @relation(name: "student_requests")
    assignments: [Request!]! @relation(name: "student_assignments")
}

type Course @collection(name: "Courses") {
    id: ID!

    title: String!
    subject: String!
    level: Int!
    professor: String!
    students: [Student!]!
}

type Request @collection(name: "Requests") {
    id: ID!

    tutor: Student! @relation(name: "student_assignments")
    tutee: Student! @relation(name: "student_requests")
    status: RequestStatus!

    course: Course!
    descripIfNotCourse: String
    tutorType: String!
    description: String!
}
###############

### Queries ###
type Query {
    allStudents: [Student]
    allCourses: [Course]
    allRequests: [Request]

    student(id: ID!): Student
    login(username: String!, passwordHash: String!): Student
}
###############

### Authentication ###
# input LoginUserInput {
#     username: String!
#     password: String!
# }
# type Mutation {
#     loginUser(input: LoginUserInput): String!
# }
###############

#
#
#
# Old stuff
# mutation CreateNewSession() {
#     createSession() {

#     }
# }

# mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {
#   createReview(episode: $ep, review: $review) {
#     stars
#     commentary
#   }
# }

# query requestsMadeByStudent($studentID: ID!) {
#     student(id: $studentID) {
#         requests {
#             description
#             tutorType
#             status
#             tutor {
#                 #If possible, this should only be included if the status is assigned
#                 name
#                 #These fields may not be necessary
#                 classStanding
#                 majors
#             }
#             course {
#                 title
#                 subject
#                 level
#                 professor
#             }
#         }
#     }
# }

# query requestsAssignedToStudent($studentID: ID!) {
#     student(_id: $studentID) {
#         assignments {
#             description
#             tutorType
#             status
#             tutee {
#                 name
#                 classStanding
#             }
#             course {
#                 title
#                 subject
#                 level
#                 professor
#             }
#         }
#     }
# }
